// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using STS.LocPoC.LocationService.UserLocations;
using Volo.Abp.Content;
using STS.LocPoC.LocationService.Shared;

// ReSharper disable once CheckNamespace
namespace STS.LocPoC.LocationService.UserLocations.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IUserLocationsAppService), typeof(UserLocationsClientProxy))]
public partial class UserLocationsClientProxy : ClientProxyBase<IUserLocationsAppService>, IUserLocationsAppService
{
    public virtual async Task<PagedResultDto<UserLocationDto>> GetListAsync(GetUserLocationsInput input)
    {
        return await RequestAsync<PagedResultDto<UserLocationDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetUserLocationsInput), input }
        });
    }

    public virtual async Task<UserLocationDto> GetAsync(Guid id)
    {
        return await RequestAsync<UserLocationDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<UserLocationDto> CreateAsync(UserLocationCreateDto input)
    {
        return await RequestAsync<UserLocationDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserLocationCreateDto), input }
        });
    }

    public virtual async Task<UserLocationDto> UpdateAsync(Guid id, UserLocationUpdateDto input)
    {
        return await RequestAsync<UserLocationDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UserLocationUpdateDto), input }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(UserLocationExcelDownloadDto input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetListAsExcelFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserLocationExcelDownloadDto), input }
        });
    }

    public virtual async Task<STS.LocPoC.LocationService.Shared.DownloadTokenResultDto> GetDownloadTokenAsync()
    {
        return await RequestAsync<STS.LocPoC.LocationService.Shared.DownloadTokenResultDto>(nameof(GetDownloadTokenAsync));
    }
}